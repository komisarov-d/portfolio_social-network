{"version":3,"sources":["assets/images/User_avatar.png","components/Dialogs/Dialogs.module.css","components/common/Paginators/Paginator.module.css","components/Header/Header.module.css","components/Navbar/Navbar.module.css","components/Footer/Footer.module.css","components/Users/Users.module.css","serviceWorker.js","API/api.ts","API/auth-api.ts","API/security-api.ts","redux/AuthStore/authReducer.ts","components/Header/HeaderComponent.tsx","components/Navbar/Navbar.tsx","components/Footer/FooterComponent.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/Validators.ts","redux/AuthStore/authSelectors.ts","components/Login/LoginPage.tsx","components/common/Loader/Loader.tsx","API/profile-api.ts","redux/ProfileStore/profileReducer.ts","redux/DialogStore/dialogsReducer.ts","utils/objHelpers.ts","API/users-api.ts","redux/UsersStore/usersReducer.ts","redux/AppStore/appReducer.ts","redux/rootReducer.ts","components/common/Paginators/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","redux/UsersStore/usersSelectors.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","components/Dialogs/DialogsList.tsx","components/Dialogs/Messages.tsx","redux/DialogStore/dialogsSelectors.ts","components/Dialogs/DialogsForm.tsx","components/Dialogs/Dialogs.tsx","redux/ProfileStore/profileSelectors.ts","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/Contact.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Posts/PostForm.tsx","components/Profile/Posts/Post.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Profile.tsx","HOC/WithAuthRedirect.tsx","components/Profile/ProfileContainer.tsx","App.tsx","index.tsx","components/Profile/Profile.module.css","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ResultCodesEnum","ResultCodeForCaptchaEnum","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","response","data","email","password","rememberMe","captcha","post","delete","securityAPI","actions","userId","login","isAuth","type","payload","captchaUrl","getAuthUserData","dispatch","a","meData","resultCode","Success","id","getCaptchaUrl","url","initialState","connect","state","auth","logout","props","className","s","header","span","logo","src","alt","offset","onClick","danger","to","Navbar","useState","collapsed","toggleCollapsed","navbar","style","width","marginBottom","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","defaultSelectedKeys","defaultOpenKeys","mode","theme","inlineCollapsed","Item","key","icon","HomeOutlined","MailOutlined","TeamOutlined","FooterComponent","footer","FormControl","meta","touched","error","children","hasError","formControl","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","text","Field","validate","maxLength","required","value","getCaptchaUrlSelector","getIsAuthSelector","maxLength30","length","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","undefined","requestError","LoginPage","useSelector","useDispatch","formData","CaptchaIsRequired","message","messages","stopSubmit","_error","Loader","profileAPI","status","put","profilePhoto","FormData","append","profile","posts","title","newPostText","getUserProfile","dialogs","newMessageBody","updateObjectInArray","items","itemId","objPropsName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","term","friend","followRequest","unfollow","users","totalUsersCount","isFetching","followingInProgress","filter","usersPage","count","requestUsers","getState","totalCount","_followUnfollowFlow","apiMethod","actionCreator","initialized","rootReducer","combineReducers","profilePage","action","newPost","Date","now","photos","dialogPage","body","followed","app","formReducer","composeEnhancers","compose","store","createStore","applyMiddleware","thunkMiddleware","Paginator","totalItemsCount","onPageChanged","x","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionNumber","rightPortionNumber","paginator","p","page","cn","selectedPage","pageNumber","User","user","follow","cover","large","User_avatar","avatar","small","description","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","onFilterChanged","initialValues","setSubmitting","isSubmitting","as","getUsersSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Users","useEffect","bind","unfollowRequest","usersElements","UsersPage","DialogItem","path","dialog","active","Message","getMessagesSelector","getDialogsSelector","DialogForm","formik","useFormik","newMessage","addNewMessage","htmlFor","onChange","handleChange","Dialogs","dialogsElements","d","DialogsList","messagesElements","m","getPostsSelector","getProfileSelector","getStatusSelector","ProfileStatus","userStatus","editMode","toggleMode","setStatus","onDoubleClick","e","currentTarget","autoFocus","onBlur","updateStatus","ReduxPostForm","Object","keys","contacts","contact","Contact","contactTitle","contactValue","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo","setEditMode","userPhoto","target","files","Error","Promise","reject","updateUserProfileData","PostForm","Post","postTitle","initial","likes","setLikes","dislikes","setDislikes","setAction","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","author","href","content","datetime","moment","format","fromNow","PostsMemorized","postsElements","reverse","Profile","mapStateToPropsForRedirect","ProfileContainer","this","params","authorizedUserId","history","getStatus","console","refreshProfile","prevProps","prevState","Component","withRouter","WrappedComponent","App","catchAllUnhandledErrors","alert","initializeApp","addEventListener","removeEventListener","fallback","from","render","AppContainer","promise","all","AppWrapper","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.18e0055f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/User_avatar.5172ccf5.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__u9bra\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1D_-d\",\"pageNumber\":\"Paginator_pageNumber__2J7Qm\",\"selectedPage\":\"Paginator_selectedPage__1uTeB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2yJoX\",\"logo\":\"Header_logo__1QKBi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__xxSgx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__WgV_A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"usersPage\":\"Users_usersPage__yz6ee\",\"user\":\"Users_user__QVyjB\",\"avatar\":\"Users_avatar__2OnjH\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// import axios from \"axios\";\r\n// import {UserType} from \"../Types/Types\";\r\n//\r\n//\r\n// export const instance = axios.create({\r\n//     withCredentials: true,\r\n//     baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n//     headers: {\r\n//         'API-KEY': '1e91d2c9-02cb-42ec-9f13-e2205e00b2f8'\r\n//     }\r\n// })\r\n// export enum ResultCodesEnum {\r\n//     Success = 0,\r\n//     Error = 1\r\n// }\r\n//\r\n// export enum ResultCodeForCaptchaEnum {\r\n//     CaptchaIsRequired = 10\r\n// }\r\n//\r\n//\r\n// export type GetItemsType = {\r\n//     items: Array<UserType>\r\n//     totalCount: number\r\n//     error: string | null\r\n//\r\n// }\r\n//\r\n// export type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n//     resultCode: RC\r\n//     messages: Array<string>\r\n//     data: D\r\n// }\r\nimport axios from \"axios\";\r\nimport {UserType} from \"../Types/Types\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"1e91d2c9-02cb-42ec-9f13-e2205e00b2f8\"\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\nexport type MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginResponseDataType = {\r\n    userId: number\r\n}\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(response => response.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe,\r\n            captcha\r\n        }).then(response => response.data)\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n","import {instance} from \"./api\";\r\ntype GetCaptchaUrlResponseType = {\r\n    url:string\r\n}\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>('security/get-captcha-url').then(response => response.data)\r\n    }\r\n}","import {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../../API/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {authAPI} from \"../../API/auth-api\";\r\nimport {securityAPI} from \"../../API/security-api\";\r\nimport {BaseThunkType, InferActionsType} from \"../rootReducer\";\r\n\r\nexport const authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INIT/SET_USER_DATA':\r\n        case 'AUTH/GET_CAPTCHA_URL':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'INIT/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'AUTH/GET_CAPTCHA_URL', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\nexport const authorization = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    const data = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl())\r\n        }\r\n        const message = data.messages.length > 0 ? data.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: message}))\r\n    }\r\n}\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\nconst initialState = {\r\n    userId: null as (number | null),\r\n    login: null as string | null,\r\n    email: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null\r\n}\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\r\n","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {logout} from \"../../redux/AuthStore/authReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Button, Col, Row} from \"antd\";\r\nimport {AppStateType} from \"../../redux/rootReducer\";\r\nimport LogoutOutlined from \"@ant-design/icons/lib/icons/LogoutOutlined\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\ntype MapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\nconst HeaderComponent: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <img\r\n                        className={s.logo}\r\n                        src=\"https://i.ya-webdesign.com/images/w3c-svg-scalable-vector-8.png\"\r\n                        alt=\"logo\"/>\r\n                </Col>\r\n                <Col offset={9} span={3}>\r\n                    {props.isAuth ?\r\n                        <div>\r\n                            <Button onClick={props.logout} danger>Logout<LogoutOutlined/></Button>\r\n                            <div>{props.login}</div>\r\n                        </div> :\r\n                        <NavLink to={'/login'}>Login</NavLink>\r\n\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </header>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\n\r\nexport default connect<MapStatePropsType, MapDispatchPropsType, {}, AppStateType>(mapStateToProps, {logout})(HeaderComponent)","import React, {useState} from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Button, Menu} from 'antd';\r\nimport s from './Navbar.module.css'\r\nimport {HomeOutlined, MailOutlined, MenuFoldOutlined, MenuUnfoldOutlined, TeamOutlined} from '@ant-design/icons';\r\n\r\nconst Navbar = () => {\r\n    const [collapsed, toggleCollapsed] = useState(true)\r\n    const activateMenu = () => {toggleCollapsed(true)}\r\n    const deactivateMenu = () => {toggleCollapsed(false)}\r\n    return (\r\n        <div className={s.navbar} style={{width: 256}}>\r\n            <Button type=\"primary\" onClick={collapsed ? deactivateMenu : activateMenu} style={{marginBottom: 16}}>\r\n                {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined)}\r\n            </Button>\r\n            <Menu\r\n                defaultSelectedKeys={['1']}\r\n                defaultOpenKeys={['sub1']}\r\n                mode=\"inline\"\r\n                theme=\"dark\"\r\n                inlineCollapsed={collapsed}\r\n            >\r\n                <Menu.Item key=\"1\" icon={<HomeOutlined/>}>\r\n                    <NavLink to='/profile' >Profile</NavLink>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"2\" icon={<MailOutlined/>}>\r\n                    <NavLink to='/dialogs' >Dialog</NavLink>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"3\" icon={<TeamOutlined/>}>\r\n                    <NavLink to='/users' >Users</NavLink>\r\n                </Menu.Item>\r\n\r\n            </Menu>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Navbar\r\n\r\n","import React from \"react\";\r\nimport s from './Footer.module.css'\r\nconst FooterComponent:React.FC = () => {\r\n    return(\r\n        <footer className={s.footer}>Footer</footer>\r\n    )\r\n}\r\nexport default FooterComponent","import React from \"react\"\r\nimport s from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/Validators\"\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n}\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}> <input {...input} {...restProps}/></FormControl>\r\n}\r\n\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {},\r\n                            text = '')\r\n{\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   validate={validators}\r\n                   component={component}\r\n                   {...props}/>\r\n            {text}\r\n        </div>)\r\n}\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export type FieldValidatorType = (value: string) => string | undefined\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'field is required'\r\n}\r\nexport const maxLengthCreator = (maxLength:number):FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n","import {AppStateType} from \"../rootReducer\";\r\n\r\nexport const getCaptchaUrlSelector = (state:AppStateType) => {\r\n    return state.auth.captchaUrl\r\n}\r\nexport const getLoginSelector = (state:AppStateType) => {\r\n    return state.auth.login\r\n}\r\nexport const getIsAuthSelector = (state:AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getUserIdSelector = (state:AppStateType) => {\r\n    return state.auth.userId\r\n}\r\nexport const getUserEmailSelector = (state:AppStateType) => {\r\n    return state.auth.email\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/Validators\";\r\nimport s from '../common/./FormsControls/FormsControls.module.css'\r\nimport {authorization} from \"../../redux/AuthStore/authReducer\";\r\nimport {getCaptchaUrlSelector, getIsAuthSelector} from \"../../redux/AuthStore/authSelectors\";\r\n\r\nconst maxLength30 = maxLengthCreator(30)\r\ntype LoginFormOwnProps = {\r\n    captchaUrl:string|null\r\n}\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({handleSubmit, error, captchaUrl}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKey>('Email', 'email', [required, maxLength30], Input)}\r\n            {createField<LoginFormValuesTypeKey>('Password', 'password', [required, maxLength30], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKey>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'Remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captchaUrl\"/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKey>(undefined, 'captcha', [required], Input)}\r\n\r\n            {error && <div className={s.requestError}>{error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\r\n    form: 'login'\r\n})(LoginForm)\r\n\r\n\r\nexport type LoginFormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormValuesTypeKey = GetStringKeys<LoginFormValuesType>\r\n\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector(getCaptchaUrlSelector)\r\n    const isAuth = useSelector(getIsAuthSelector)\r\nconst dispatch = useDispatch()\r\n    if (isAuth) return <Redirect to={'/profile'}/>\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(authorization(\r\n            formData.email,\r\n            formData.password,\r\n            formData.rememberMe,\r\n            formData.captcha\r\n        ))\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            <h1>Login</h1>\r\n            <LoginReduxForm captchaUrl={captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport './loader.css'\r\nexport const Loader:React.FC = () => {\r\n\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n            <div/>\r\n        </div>\r\n    )\r\n}","import {PhotosType, ProfileType} from \"../Types/Types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\ntype SavePhotoResponseDataType = {\r\n    photos:PhotosType\r\n}\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(response => response.data)\r\n\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>('profile/status/' + userId).then(response => response.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status}).then(response => response.data)\r\n    },\r\n    updateAvatar(profilePhoto: File) {\r\n        const formData = new FormData()\r\n        formData.append('image', profilePhoto)\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(response => response.data)\r\n    },\r\n    updateProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(response => response.data)\r\n    }\r\n}","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PostType, ProfileType, PhotosType} from \"../../Types/Types\";\r\nimport {profileAPI} from \"../../API/profile-api\";\r\nimport {BaseThunkType, InferActionsType} from \"../rootReducer\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, title: 'first'},\r\n        {id: 2, title: 'second'},\r\n        {id: 3, title: 'hello'},\r\n        {id: 4, title: 'bye'}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\nexport const profileReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'POST/ADD_POST':\r\n            let newPost = {\r\n                id:Date.now(),\r\n                title:action.newPostText\r\n            }\r\n            return {...state, posts: [...state.posts, newPost]}\r\n        case 'USER/SET_USER_PROFILE':\r\n            return {...state, profile: action.profile}\r\n        case 'USER/SET_STATUS':\r\n            return {...state, status: action.payload}\r\n        case 'USER/UPDATE_PHOTO':\r\n            return {...state, profile: {...state.profile, photos: action.payload} as ProfileType}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const actions = {\r\n    createPost: (newPostText: string) => ({type: 'POST/ADD_POST',  newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'USER/SET_USER_PROFILE', profile: profile} as const),\r\n    setStatus: (status: string) => ({type: 'USER/SET_STATUS', payload: status} as const),\r\n    updatePhoto: (profilePhoto: PhotosType) => ({type: 'USER/UPDATE_PHOTO', payload: profilePhoto} as const)\r\n}\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data))\r\n}\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateStatus(status)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.setStatus(status))\r\n    }\r\n}\r\nexport const savePhoto = (profilePhoto: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.updateAvatar(profilePhoto)\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.updatePhoto(data.data.photos))\r\n    }\r\n}\r\nexport const updateUserProfileData = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    let data = await profileAPI.updateProfile(profile)\r\n    if (data.resultCode === 0) {\r\n        if (userId !== null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(`UserId can't be null`)\r\n        }\r\n\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0]}))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsType<typeof actions>","import {InferActionsType} from \"../rootReducer\";\r\n\r\ntype MessagesType = {\r\n    id:number\r\n    message:string\r\n}\r\ntype DialogsType = {\r\n    id:number\r\n    name:string\r\n}\r\nconst initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'How are you?'},\r\n        {id: 3, message: 'Hey'},\r\n    ] as Array<MessagesType>,\r\n    dialogs: [\r\n        {id: 1, name: 'Dmitriy'},\r\n        {id: 2, name: 'Kate'},\r\n        {id: 3, name: 'Ira'},\r\n        {id: 4, name: 'Boris'},\r\n    ] as Array<DialogsType>\r\n}\r\n\r\nexport const dialogsReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: Date.now(), message: body}]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) =>  ({type: 'DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\ntype ActionTypes = InferActionsType<typeof actions>\r\nexport type InitialStateType = typeof initialState","export const updateObjectInArray = (items:any, itemId:any, objPropsName:any, newObjProps:any) => {\r\n    return items.map((u:any) => {\r\n        if (u[objPropsName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(response => response.data)\r\n    },\r\n    followRequest(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(response => response.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(response => response.data) as Promise<APIResponseType>\r\n    }\r\n}","import {updateObjectInArray} from \"../../utils/objHelpers\";\r\nimport {UserType} from \"../../Types/Types\";\r\nimport {InferActionsType, BaseThunkType} from \"../rootReducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../API/users-api\";\r\nimport {APIResponseType} from \"../../API/api\";\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    totalUsersCount: 0,\r\n    pageSize: 12,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n\r\nexport const usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'USERS/FOLLOW' :\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: true})\r\n            }\r\n        case 'USERS/UNFOLLOW' :\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, \"id\", {followed: false})\r\n            }\r\n        case 'USERS/SET_USERS':\r\n            return {...state, users: action.usersPage}\r\n        case 'USERS/SET_CURRENT_PAGE':\r\n            return {...state, currentPage: action.currentPage}\r\n        case 'USERS/SET_FILTER':\r\n            return {...state, filter: action.payload}\r\n        case 'USERS/SET_TOTAL_COUNT':\r\n            return {...state, totalUsersCount: action.count}\r\n        case 'USERS/TOGGLE_IS_FETCHING':\r\n            return {...state, isFetching: action.isFetching}\r\n        case 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS':\r\n            return {\r\n                ...state, followingInProgress: action.isFetching ?\r\n                    [...state.followingInProgress, action.userId]\r\n                    :\r\n                    state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'USERS/SET_USERS', usersPage: users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({type: 'USERS/SET_TOTAL_COUNT', count: totalUsersCount} as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({type: 'USERS/TOGGLE_IS_FETCHING', isFetching} as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: FilterType): ThunkType => async (dispatch, getState) => {\r\n    dispatch(actions.toggleIsFetching(true))\r\n    dispatch(actions.setCurrentPage(currentPage))\r\n    dispatch(actions.setFilter(filter))\r\n    let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend)\r\n    dispatch(actions.toggleIsFetching(false))\r\n    dispatch(actions.setUsers(data.items))\r\n    dispatch(actions.setTotalUsersCount(data.totalCount))\r\n}\r\n\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n\r\n}\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.followRequest.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\ntype ActionsTypes = InferActionsType<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type InitialStateType = typeof initialState\r\nexport type FilterType = typeof initialState.filter","import {getAuthUserData} from \"../AuthStore/authReducer\";\r\nimport {InferActionsType} from \"../rootReducer\";\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\nexport const appReducer = (state = initialState, action:ActionsTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/INITIALIZATION' :\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const actions = {\r\n     initializingSuccess: () => ({type: 'APP/INITIALIZATION'} as const)\r\n}\r\nexport const initializeApp = () => (dispatch:any) => {\r\n    let promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializingSuccess())\r\n        });\r\n}\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsType<typeof actions>","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport {profileReducer} from \"./ProfileStore/profileReducer\";\r\nimport {dialogsReducer} from \"./DialogStore/dialogsReducer\";\r\nimport {authReducer} from \"./AuthStore/authReducer\";\r\nimport {usersReducer} from \"./UsersStore/usersReducer\"\r\nimport {appReducer} from \"./AppStore/appReducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogPage: dialogsReducer,\r\n    auth: authReducer,\r\n    usersPage: usersReducer,\r\n    app: appReducer,\r\n    form: formReducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\nexport type InferActionsType<T> = T extends { [key: string]: (...args: any[]) => infer U } ? U : never\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\r\n\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))","import React, {useState} from \"react\";\r\nimport s from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsTypes = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged?: (pageNumber:number) => void\r\n    portionSize?: number\r\n}\r\n\r\nconst Paginator: React.FC<PropsTypes> = ({totalItemsCount, pageSize, currentPage, onPageChanged = x => x, portionSize = 10}) => {\r\n    let pageCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages:Array<number> = [];\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n    let portionCount = Math.ceil(pageCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}>PREV</button>}\r\n            {pages\r\n                .filter(p => p >= leftPortionNumber && p <= rightPortionNumber)\r\n                .map(page => {\r\n                    return <span className={cn({\r\n                        [s.selectedPage]: currentPage === page\r\n                    }, s.pageNumber)}\r\n                                 key={page}\r\n                                 onClick={() => {\r\n                                     onPageChanged(page)\r\n                                 }}\r\n                    >{page}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}>Next</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator\r\n","import {NavLink} from \"react-router-dom\";\r\nimport User_avatar from \"../../assets/images/User_avatar.png\";\r\nimport React from \"react\";\r\nimport {UserType} from \"../../Types/Types\";\r\nimport {Avatar, Button, Card} from \"antd\";\r\nimport Meta from \"antd/lib/card/Meta\";\r\ntype PropsType = {\r\n    user:UserType\r\n    followingInProgress:Array<number>\r\n    follow:(userId:number) => void\r\n    unfollow:(userId:number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, follow, unfollow}) => {\r\n    return (\r\n\r\n         <div>\r\n\r\n             <NavLink to={'/profile/' + user.id}>\r\n            <Card\r\n                 style={{ width: 250 }}\r\n                 cover={\r\n                     <img\r\n                         alt=\"example\"\r\n                         src={user.photos.large !== null ? user.photos.large : User_avatar}\r\n                     />}>\r\n                 <Meta\r\n                    avatar={<Avatar src={user.photos.small !== null ? user.photos.small : User_avatar} />}\r\n                     title={user.name}\r\n                     description={user.status}\r\n                 />\r\n                 <hr/>\r\n             </Card>\r\n         </NavLink>\r\n             {user.followed ?\r\n                 <Button danger disabled={followingInProgress.some(id => id === user.id)}\r\n                         onClick={() => {unfollow(user.id)}} >Unfollow</Button>\r\n                              :\r\n                 <Button disabled={followingInProgress.some(id => id === user.id)}\r\n                         onClick={() => {follow(user.id)}}>Follow</Button>}\r\n                     </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default User\r\n","import React from \"react\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport {FilterType} from \"../../redux/UsersStore/usersReducer\";\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {};\r\n    return errors;\r\n}\r\ntype FormTypes = {\r\n    term:string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo(({onFilterChanged}) => {\r\n    const submit = (values: FormTypes, {setSubmitting}: { setSubmitting: (arg0: boolean) => void }) => {\r\n        const filter:FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n        onFilterChanged(filter)\r\n\r\n        setSubmitting(false)\r\n    }\r\n    return (\r\n        <Formik\r\n            initialValues={{term: '', friend: 'null'}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n                    <Field name='friend' as='select'>\r\n                        <option value='null'>ALL</option>\r\n                        <option value='true'>Only followed</option>\r\n                        <option value='false'>Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Submit\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})\r\nexport default UsersSearchForm","import {AppStateType} from \"../rootReducer\";\r\n\r\nexport const getUsersSelector = (state:AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\nexport const getPageSize = (state:AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state:AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state:AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state:AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state:AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state:AppStateType) => {\r\n    return state.usersPage.filter\r\n}","import React, {useEffect} from \"react\";\r\nimport s from './Users.module.css'\r\nimport Paginator from \"../common/Paginators/Paginator\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage, getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsersFilter,\r\n    getUsersSelector\r\n} from \"../../redux/UsersStore/usersSelectors\";\r\nimport {FilterType, follow, requestUsers, unfollow} from \"../../redux/UsersStore/usersReducer\";\r\n\r\n\r\nexport const Users: React.FC = (props) => {\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const users = useSelector(getUsersSelector)\r\n    const pageSize = useSelector(getPageSize)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const filter = useSelector(getUsersFilter)\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(requestUsers(currentPage,pageSize,filter))\r\n    }, [dispatch, currentPage, filter, pageSize])\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const followRequest = (userId:number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n    const unfollowRequest = (userId:number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    const usersElements = users.map((user) => <User key={user.id} user={user}\r\n                                                    followingInProgress={followingInProgress}\r\n                                                    follow={followRequest}\r\n                                                    unfollow={unfollowRequest}/>)\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>Search Panel</h3>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            </div>\r\n            <div>\r\n                <Paginator onPageChanged={onPageChanged} currentPage={currentPage} totalItemsCount={totalUsersCount}\r\n                           pageSize={pageSize}/>\r\n            </div>\r\n            <div className={s.usersPage}>\r\n                {usersElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Users} from \"./Users\";\r\nimport {Loader} from \"../common/Loader/Loader\";\r\nimport {getIsFetching} from \"../../redux/UsersStore/usersSelectors\";\r\nimport { useSelector} from \"react-redux\";\r\n\r\nexport const UsersPage:React.FC = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return (\r\n        <div>\r\n            {isFetching && <Loader/>}\r\n            <Users />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div >{props.message}</div>\r\n}\r\n\r\nexport default Message","import {AppStateType} from \"../rootReducer\";\r\n\r\nexport const getMessagesSelector = (state:AppStateType) => {\r\n    return state.dialogPage.messages\r\n}\r\nexport const getDialogsSelector = (state:AppStateType) => {\r\n    return state.dialogPage.dialogs\r\n}","// import {createField, Textarea} from \"../common/FormsControls/FormsControls\";\r\n// import {maxLengthCreator, required} from \"../../utils/validators/Validators\";\r\nimport React from \"react\";\r\n// import {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {useFormik} from 'formik';\r\nimport {Input} from \"antd\";\r\n\r\n\r\ntype PropsType = {\r\n    addNewMessage: (newMessage: string ) => void\r\n}\r\nexport const DialogForm: React.FC<PropsType> = (props) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newMessage: '' ,\r\n        },\r\n        onSubmit: values => {\r\n            props.addNewMessage(values.newMessage)\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"newMessage\">New Message</label>\r\n                        <Input\r\n                id=\"newMessage\"\r\n                name=\"newMessage\"\r\n                type=\"text\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.newMessage}\r\n            />\r\n            <button>Send</button>\r\n        </form>\r\n    );\r\n};\r\n\r\n","import React from \"react\";\r\nimport DialogsList from \"./DialogsList\";\r\nimport {Col, Row} from \"antd\";\r\nimport {actions} from \"../../redux/DialogStore/dialogsReducer\";\r\nimport Message from \"./Messages\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDialogsSelector, getMessagesSelector} from \"../../redux/DialogStore/dialogsSelectors\";\r\nimport {DialogForm} from \"./DialogsForm\";\r\nimport s from './Dialogs.module.css'\r\n\r\n\r\nexport const Dialogs: React.FC = (props) => {\r\n    const dialogs = useSelector(getDialogsSelector)\r\n    const messages = useSelector(getMessagesSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    let dialogsElements = dialogs.map(d => <DialogsList key={d.id} id={d.id} name={d.name}/>)\r\n    let messagesElements = messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    let addNewMessage = (newMessage: string) => {\r\n        dispatch(actions.sendMessage(newMessage));\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <Row>\r\n                <Col span={7}>\r\n                    {dialogsElements}\r\n                </Col>\r\n                <Col span={14}>\r\n                    {messagesElements}\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <DialogForm addNewMessage={addNewMessage}/>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n","import {AppStateType} from \"../rootReducer\";\r\n\r\nexport const getPostsSelector = (state: AppStateType) => {\r\n    return state.profilePage.posts\r\n}\r\nexport const getProfileSelector = (state: AppStateType) => {\r\n    return state.profilePage.profile\r\n}\r\nexport const getStatusSelector = (state: AppStateType) => {\r\n    return state.profilePage.status\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getStatusSelector} from \"../../../redux/ProfileStore/profileSelectors\";\r\nimport {updateStatus} from \"../../../redux/ProfileStore/profileReducer\";\r\n\r\nconst ProfileStatus: React.FC = (props) => {\r\nconst userStatus = useSelector(getStatusSelector)\r\n    const dispatch = useDispatch()\r\n    let [editMode, toggleMode] = useState(false)\r\n    let [status, setStatus] = useState(userStatus)\r\n    useEffect(() => {\r\n        setStatus(userStatus)\r\n    }, [userStatus])\r\n    const activateEditMode = () => {\r\n        toggleMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        toggleMode(false)\r\n        dispatch(updateStatus(status))\r\n    }\r\n    const onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <b>Status: </b> <span onDoubleClick={activateEditMode}>{userStatus || \"-------\"}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n        );\r\n}\r\nexport default ProfileStatus\r\n","import React from \"react\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from '../../common/FormsControls/FormsControls.module.css'\r\nimport {ProfileType} from \"../../../Types/Types\";\r\nimport {Button} from \"antd\";\r\n\r\n\r\ntype ProfileFormOwnProps = {\r\n    profile: ProfileType\r\n}\r\ntype ProfileTypeKey = GetStringKeys<ProfileType>\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileFormOwnProps> & ProfileFormOwnProps> = ({profile, handleSubmit, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Button onClick={handleSubmit}>Save changes</Button>\r\n            </div>\r\n            <div>\r\n                {error && <div className={s.requestError}>{error}</div>}\r\n            </div>\r\n\r\n            <div>\r\n                <b>Full name</b>: {createField<ProfileTypeKey>('Full name', 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>lookingForAJob</b>:{createField<ProfileTypeKey>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>: {createField<ProfileTypeKey>('Add you skills', 'lookingForAJobDescription', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b> {createField<ProfileTypeKey>('About me', 'aboutMe', [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contact}>\r\n                    <b>{key}</b>{createField(key, 'contacts.' + key, [], Input)}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst ReduxPostForm = reduxForm<ProfileType, ProfileFormOwnProps>({\r\n    form: 'Profile-data-form'\r\n})(ProfileDataForm)\r\n\r\nexport default ReduxPostForm","import s from \"../Profile.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PropsType = {\r\n    contactTitle:string\r\n    contactValue:string\r\n}\r\n\r\nconst Contact:React.FC<PropsType> = ({contactTitle, contactValue}) => {\r\n    return(\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\nexport default Contact","import React, {ChangeEvent, useState} from \"react\";\r\nimport {Loader} from \"../../common/Loader/Loader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport {ContactsType, ProfileType} from \"../../../Types/Types\";\r\nimport s from \"../Profile.module.css\";\r\nimport userPhoto from \"../../../assets/images/User_avatar.png\";\r\nimport ProfileReduxForm from \"./ProfileDataForm\";\r\nimport Contact from \"./Contact\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getProfileSelector} from \"../../../redux/ProfileStore/profileSelectors\";\r\nimport {savePhoto, updateUserProfileData} from \"../../../redux/ProfileStore/profileReducer\";\r\nimport {Button} from \"antd\";\r\n\r\ntype PropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({   isOwner}) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const profile = useSelector(getProfileSelector)\r\n\r\n    if (!profile) {\r\n        return <Loader/>\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(updateUserProfileData(formData))\r\n                setEditMode(false)\r\n    }\r\n    const onMainPhotoSelector = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img alt='profileAva' className={s.avatar} src={profile.photos.large || userPhoto}/>\r\n               <div> {isOwner && <input title={'Update user photo'} type={'file'} onChange={onMainPhotoSelector}/>}</div>\r\n                {editMode ?\r\n                    <ProfileReduxForm profile={profile} initialValues={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} goToEditMode={() => {setEditMode(true)}} isOwner={isOwner}/>}\r\n            </div>\r\n            <ProfileStatus/>\r\n        </div>\r\n    )\r\n}\r\ntype ProfileDataPropsType = {\r\n    profile:ProfileType\r\n    isOwner:boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData:React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <Button onClick={goToEditMode}>Edit profile</Button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>:{profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>lookingForAJob</b>: {profile.lookingForAJob ? 'Yes' : 'No'}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo","import * as React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {actions} from \"../../../redux/ProfileStore/profileReducer\";\r\nimport {Input} from \"antd\";\r\n\r\n\r\nconst PostForm:React.FC = (props) => {\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            newPostText: '' ,\r\n        },\r\n        onSubmit: values => {\r\ndispatch(actions.createPost(values.newPostText))\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"newPostText\">New Post</label>\r\n            <Input\r\n                style={{width:'300px'}}\r\n                id=\"newPostText\"\r\n                name=\"newPostText\"\r\n                type=\"text\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.newPostText}\r\n            />\r\n            <button >Create Post</button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default PostForm","import React, {createElement, useState} from 'react';\r\nimport {Comment, Tooltip, Avatar} from 'antd';\r\nimport moment from 'moment';\r\nimport {DislikeOutlined, LikeOutlined, DislikeFilled, LikeFilled} from '@ant-design/icons';\r\n\r\ntype PropsType = {\r\n    postTitle: string\r\n}\r\n\r\nconst Post: React.FC<PropsType & {initial: null | string}> = ({postTitle, initial = null}) => {\r\n    const [likes, setLikes] = useState(0);\r\n    const [dislikes, setDislikes] = useState(0);\r\n    const [action, setAction] = useState(initial);\r\n\r\n    const like = () => {\r\n        setLikes(1);\r\n        setDislikes(0);\r\n        setAction('liked')\r\n    };\r\n\r\n    const dislike = () => {\r\n        setLikes(0);\r\n        setDislikes(1);\r\n        setAction('disliked')\r\n    };\r\n\r\n    const actions = [\r\n        <Tooltip key=\"comment-basic-like\" title=\"Like\">\r\n      <span onClick={like}>\r\n        {createElement(action === 'liked' ? LikeFilled : LikeOutlined)}\r\n          <span className=\"comment-action\">{likes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span onClick={dislike}>\r\n        {React.createElement(action === 'disliked' ? DislikeFilled : DislikeOutlined)}\r\n          <span className=\"comment-action\">{dislikes}</span>\r\n      </span>\r\n        </Tooltip>,\r\n        <span key=\"comment-basic-reply-to\">Reply to</span>,\r\n    ];\r\n\r\n    return (\r\n        <Comment\r\n            actions={actions}\r\n            author={<a href={'post'}>Han Solo</a>}\r\n            avatar={\r\n                <Avatar\r\n                    src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\r\n                    alt=\"Han Solo\"\r\n                />\r\n            }\r\n            content={<p>{postTitle}</p>}\r\n            datetime={\r\n                <Tooltip title={moment().format('YYYY-MM-DD HH:mm:ss')}>\r\n                    <span>{moment().fromNow()}</span>\r\n                </Tooltip>\r\n            }\r\n        />\r\n    );\r\n};\r\nexport default Post","import * as React from \"react\";\r\nimport ReduxPostForm from \"./PostForm\";\r\nimport Post from \"./Post\";\r\nimport s from '../Profile.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {getPostsSelector} from \"../../../redux/ProfileStore/profileSelectors\";\r\n\r\n\r\nconst Posts:React.FC = (props) => {\r\n\r\n    const posts = useSelector(getPostsSelector)\r\n    let postsElements = posts.reverse().map(p => <Post initial={null} key={p.id} postTitle={p.title}/>)\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <ReduxPostForm/>\r\n            </div>\r\n            <h3>My Posts</h3>\r\n\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nconst PostsMemorized = React.memo(Posts)\r\nexport default PostsMemorized","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsMemorized from \"./Posts/Posts\";\r\n\r\ntype PropsType = {\r\n    isOwner:boolean\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <ProfileInfo isOwner={props.isOwner} />\r\n            <PostsMemorized />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/rootReducer\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile} from \"../../redux/ProfileStore/profileReducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../HOC/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/rootReducer\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number ) => void\r\n    getStatus: (userId: number | null) => void\r\n\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\")\r\n        } else {\r\n            this.props.getUserProfile(userId)\r\n            this.props.getStatus(userId)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n    componentWillUnmount(): void {}\r\n\r\n    render() {\r\n        return <Profile  isOwner={!this.props.match.params.userId} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    authorizedUserId: state.auth.userId\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getStatus\r\n    }),\r\n    withRouter, withAuthRedirect)(ProfileContainer)\r\n","import React, {Suspense} from 'react';\r\nimport './App.css';\r\nimport HeaderComponent from \"./components/Header/HeaderComponent\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport FooterComponent from \"./components/Footer/FooterComponent\";\r\nimport {BrowserRouter, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\r\nimport {LoginPage} from './components/Login/LoginPage'\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {Loader} from \"./components/common/Loader/Loader\";\r\nimport {AppStateType, store} from \"./redux/rootReducer\";\r\nimport {Row, Col} from 'antd';\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/AppStore/appReducer\";\r\nimport {UsersPage} from \"./components/Users/UsersContainer\";\r\nimport {Dialogs} from \"./components/Dialogs/Dialogs\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert(' error ' + e)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Loader/>\r\n        }\r\n        return (<div className={'app'}>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <HeaderComponent/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={3}>\r\n                        <Navbar/>\r\n                    </Col>\r\n                    <Col className={'content'} offset={1} span={18}>\r\n                        <Switch>\r\n                            <Suspense fallback={<div><Loader/></div>}>\r\n\r\n                                <Redirect from={'/'} to={'/profile'}/>\r\n\r\n                                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n\r\n                                 <Route path='/dialogs' render={() => <Dialogs/>}/>\r\n\r\n                                <Route path='/users' render={() => <UsersPage/>}/>\r\n\r\n                                 <Route path='/login' render={() => <LoginPage/>}/>\r\n\r\n                            </Suspense>\r\n                        </Switch>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24}>\r\n                        <FooterComponent/>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\nconst AppContainer = compose<React.ComponentType>(\r\n    withRouter, connect(mapStateToProps, {initializeApp})\r\n)(App)\r\n\r\n\r\nconst AppWrapper: React.FC = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n                <AppContainer/>\r\n            </BrowserRouter>\r\n        </Provider>)\r\n}\r\n\r\n\r\nexport default AppWrapper\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWrapper from \"./App\";\r\nimport 'antd/dist/antd.css'\r\n\r\nReactDOM.render(<AppWrapper/>,document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1yoS8\",\"avatar\":\"Profile_avatar__2U7Mm\",\"contact\":\"Profile_contact__11bhH\",\"requestError\":\"Profile_requestError__1p0qE\",\"posts\":\"Profile_posts__1DSGk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1CIgc\",\"error\":\"FormsControls_error__2isJh\",\"requestError\":\"FormsControls_requestError__O8HOF\"};"],"sourceRoot":""}