{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Header/Header.module.css","components/Dialogs/Dialogs.module.css","components/Users/Users.module.css","components/Profile/Profile.module.css","components/Footer/Footer.module.css","components/Music/Music.module.css","components/Settings/Settings.module.css","redux/AuthStore/authTypes.js","components/Header/Login.js","redux/AuthStore/authActions.js","components/Header/Header.js","components/Navbar/Navbar.js","components/Footer/Footer.js","components/Profile/PostForm/PostForm.js","redux/ProfileStore/profileActions.js","redux/ProfileStore/profileTypes.js","components/Profile/Posts/Posts.js","components/Profile/Posts/PostList.js","components/Profile/Posts/FetchedPosts.js","components/Profile/ProfileInfo.js","components/Profile/Profile.js","components/Dialogs/DialogsContent/DialogsForm.js","redux/DialogStore/dialogsActions.js","redux/DialogStore/dialogTypes.js","components/Dialogs/DialogsContent/DialogsList.js","components/Dialogs/DialogsContent/DialogsMessages.js","components/Dialogs/Dialogs.js","components/Users/User.js","components/Users/Users.js","components/Music/Music.js","components/Settings/Settings.js","App.js","serviceWorker.js","redux/ProfileStore/profileReducer.js","redux/DialogStore/dialogsReducer.js","redux/AuthStore/authReducer.js","redux/appReducer.js","redux/SagaWatcher.js","index.js"],"names":["module","exports","LOGIN","LoginForm","auth","useSelector","state","dispatch","useDispatch","formik","useFormik","initialValues","email","password","onSubmit","values","type","resetForm","onClick","handleSubmit","id","name","onChange","handleChange","value","className","s","form","placeholder","Header","header","logo","src","alt","login","Login","Navbar","navbar","to","activeClassName","active","item","Footer","footer","PostForm","postTitle","postText","Date","now","toString","title","payload","htmlFor","Posts","index","useState","likes","setLikes","role","aria-label","removePost","PostList","posts","profile","map","post","key","FetchedPosts","fetchedPosts","length","ProfileInfo","editMode","changeMode","status","onDoubleClick","Profile","content","bgImg","DialogForm","messageTitle","newMessage","message","DialogsList","userId","dialogList","DialogsMessage","Dialogs","dialogs","users","dialogWrapper","user","dialog","User","Users","Music","music","Settings","settings","App","path","component","Boolean","window","location","hostname","match","initialState","appReducer","combineReducers","action","concat","filter","sagaWatcher","sagaWorker","takeEvery","call","fetchPosts","put","console","log","a","fetch","response","json","saga","createSagaMiddleware","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","run","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.000337f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__aJUTS\",\"item\":\"Navbar_item__2PRbf\",\"active\":\"Navbar_active__2Cfap\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__Py8W2\",\"logo\":\"Header_logo__11QrH\",\"form\":\"Header_form__Jjvl2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogWrapper\":\"Dialogs_dialogWrapper__dVZap\",\"dialogList\":\"Dialogs_dialogList__1KJUk\",\"dialogs\":\"Dialogs_dialogs__Jg0mR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"users\":\"Users_users__2Qm9l\",\"user\":\"Users_user__Y7Xnl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1P-PD\",\"bgImg\":\"Profile_bgImg__2Wvmz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__klblV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"music\":\"Music_music__2-iSd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__sLpXp\"};","export const LOGIN = 'INIT/LOGIN'\r\nexport const LOGOUT = 'INIT/LOGOUT'","import {useFormik} from \"formik\";\r\nimport s from \"./Header.module.css\";\r\nimport React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login, logout} from \"../../redux/AuthStore/authActions\";\r\n\r\nconst LoginForm = () => {\r\nconst auth = useSelector(state => state.auth.auth)\r\nconst dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values.email, values.password))\r\n            formik.resetForm()\r\n\r\n        },\r\n    });\r\n    if (!auth) {\r\n        return(\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <input id='email' name='email'\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.email}\r\n                       className={s.form} type=\"Email\" placeholder='email'/>\r\n                <input id='password' name='password'\r\n                       className={s.form}\r\n                       onChange={formik.handleChange}\r\n                       value={formik.values.password}\r\n                       type=\"Password\" placeholder='password'/>\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n       }\r\nif (auth){\r\n\r\n    return (\r\n        <button onClick={() => dispatch(logout())} >Logout</button>\r\n    )}\r\n}\r\nexport default LoginForm","import {LOGIN, LOGOUT} from \"./authTypes\";\r\n\r\nexport const login = () => {\r\n    return {\r\n        type: LOGIN\r\n    }\r\n}\r\nexport const logout = () => {\r\n    return {\r\n        type: LOGOUT\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport LoginForm from \"./Login\";\r\n\r\nconst Header = () => {\r\n\r\n\r\n    return (\r\n        <header className={s.header}>\r\n            <div> <img\r\n                className={s.logo}\r\n                src=\"https://i.ya-webdesign.com/images/w3c-svg-scalable-vector-8.png\"\r\n                alt=\"logo\"/>Header </div>\r\n           <div className={s.login}>\r\n               <LoginForm/>\r\n           </div>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from \"react\";\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n\r\n    return (\r\n        <nav className={s.navbar}>\r\n            <NavLink to='/profile' activeClassName={s.active} className={s.item}>Profile</NavLink>\r\n            <hr/>\r\n            <NavLink to='/dialogs' className={s.item} activeClassName={s.active}>Dialog</NavLink>\r\n            <hr/>\r\n            <NavLink to='/users' className={s.item} activeClassName={s.active}>Users</NavLink>\r\n            <hr/>\r\n            <NavLink to='/music' className={s.item} activeClassName={s.active}>Music</NavLink>\r\n            <hr/>\r\n            <NavLink to='/settings' className={s.item} activeClassName={s.active}>Settings</NavLink>\r\n            <hr/>\r\n\r\n        </nav>\r\n    )\r\n}\r\nexport default Navbar","import React from \"react\";\r\nimport s from './Footer.module.css'\r\nconst Footer = () => {\r\n\r\n    return(\r\n        <footer className={s.footer}>Footer</footer>\r\n    )\r\n}\r\nexport default Footer","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {createPost} from \"../../../redux/ProfileStore/profileActions\";\r\n\r\nconst PostForm = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            postTitle: '',\r\n        },\r\n        onSubmit: values => {\r\n            const postText = {\r\n                id:Date.now().toString(),\r\n                title:formik.values.postTitle\r\n            }\r\n            dispatch(createPost(postText))\r\n\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"postTitle\">Post Text</label>\r\n            <input\r\n                id=\"postTitle\"\r\n                name=\"postTitle\"\r\n                type=\"text\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.postTitle}\r\n            />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n}\r\nexport default PostForm","import {ADD_POST,  REMOVE_POST, REQUEST_POST} from \"./profileTypes\";\r\n\r\nexport const createPost = post => {\r\n    return {\r\n        type: ADD_POST,\r\n        payload: post\r\n    }\r\n}\r\nexport const removePost = id => {\r\n    return {\r\n        type: REMOVE_POST,\r\n        payload: id\r\n    }\r\n\r\n}\r\nexport const fetchPost = () => {\r\n\r\n    return {\r\n        type: REQUEST_POST\r\n    }\r\n    // function getUserPermissions() {\r\n    //     return axios.get('/user/12345/permissions');\r\n    // }\r\n    // return async dispatch => {\r\n    //\r\n    //         const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=6')\r\n    //         const json = await response.json()\r\n    //\r\n    //     setTimeout(() => {\r\n    //         dispatch({\r\n    //             type: REQUEST_POST,\r\n    //             payload: json\r\n    //         })\r\n    //     },500)\r\n    //\r\n    //\r\n    // }\r\n}\r\n","export const ADD_POST = 'POST/ADD_POST'\r\nexport const REMOVE_POST = 'POST/REMOVE_POST'\r\nexport const FETCH_POST = 'POST/FETCH_POST'\r\nexport const REQUEST_POST = 'POST/REQUEST_POST'\r\n","import React, {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removePost} from \"../../../redux/ProfileStore/profileActions\";\r\n\r\nconst Posts = ({index,id, title}) => {\r\n    const [likes, setLikes] = useState(0)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div>\r\n            <strong>{index + 1}</strong>&nbsp;{title}\r\n\r\n            <button onClick={() => setLikes(likes + 1)}>\r\n                {likes}\r\n                <span role=\"img\" aria-label=\"like\">&#10084;</span>\r\n            </button>\r\n            <button onClick={() => dispatch(removePost(id))}>\r\n                <span role=\"img\" aria-label=\"remove\">&#10060;</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nexport default Posts","import React from \"react\";\r\nimport Posts from \"./Posts\";\r\nimport {useSelector} from \"react-redux\";\r\n\r\nconst PostList = () => {\r\n    const posts = useSelector(state => state.profile.posts)\r\n\r\n    return (\r\n        <div>\r\n            {posts.map((post, index) => {\r\n                return <Posts key={post.id} index={index} {...post}/>\r\n            })}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default PostList","import React from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport Posts from \"./Posts\";\r\nimport {fetchPost} from \"../../../redux/ProfileStore/profileActions\";\r\n\r\nconst FetchedPosts = () => {\r\n    const fetchedPosts = useSelector(state => state.profile.fetchedPosts)\r\n    const dispatch = useDispatch()\r\n    if (!fetchedPosts.length) {\r\n        return <button onClick={() => dispatch(fetchPost())}>Upload Posts</button>\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            {fetchedPosts.map((post, index) => {\r\n                return <Posts {...post} index={index} id={post.id}/>\r\n            })}\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default FetchedPosts","import React, {useState} from \"react\";\r\nimport {useFormik} from \"formik\";\r\n\r\nconst ProfileInfo = () => {\r\n\r\n    const [editMode, changeMode] = useState(false)\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            status: '',\r\n        },\r\n        onSubmit: values => {\r\n            // values.status = status\r\n            changeMode(false)\r\n\r\n        },\r\n    });\r\n\r\n    if (!editMode) {\r\n        return formik.values.status.length ?\r\n            <div onDoubleClick={() => changeMode(true)}>{formik.values.status}</div>\r\n            :\r\n            <div onDoubleClick={() => changeMode(true)}>Status are empty</div>\r\n    }\r\n\r\n    if (editMode) {\r\n        return (\r\n            <form onSubmit={formik.handleSubmit}>\r\n\r\n                <input\r\n                    id=\"status\"\r\n                    name=\"status\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.status}\r\n\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\nexport default ProfileInfo\r\n\r\n","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport PostForm from \"./PostForm/PostForm\";\r\nimport PostList from \"./Posts/PostList\";\r\nimport FetchedPosts from \"./Posts/FetchedPosts\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nconst Profile = () => {\r\n\r\n    return(\r\n        <div className={s.content}>\r\n            <img className={s.bgImg} alt='bg-img' src='https://www.imgacademy.cn/themes/custom/imgacademy/images/helpbox-contact.jpg'/>\r\n            <ProfileInfo/>\r\n            <h3>My Posts</h3>\r\n            <PostForm/>\r\n            <FetchedPosts/>\r\n            <PostList/>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Profile","import {useFormik} from \"formik\";\r\nimport React from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessage} from \"../../../redux/DialogStore/dialogsActions\";\r\n\r\nconst DialogForm = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            messageTitle: '',\r\n        },\r\n        onSubmit: values => {\r\n            const newMessage = {\r\n                id:Date.now(),\r\n                message:values.messageTitle\r\n            }\r\n\r\n            dispatch(sendMessage(newMessage))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <label htmlFor=\"messageTitle\">New message</label>\r\n            <input\r\n                id=\"messageTitle\"\r\n                name=\"messageTitle\"\r\n                type=\"text\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.messageTitle}\r\n            />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\nexport default DialogForm","import {SEND_MESSAGE} from \"./dialogTypes\";\r\n\r\nexport const sendMessage = message => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        payload: message\r\n    }\r\n}\r\n","export const SEND_MESSAGE = 'DIALOGS/SEND_MESSAGE'\r\n","import React from \"react\";\r\nimport s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogsList = ({name, userId}) => {\r\n    return(\r\n        <div className={s.dialogList}>\r\n            <NavLink to={'/dialogs/' + userId}>{name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogsList","import React from \"react\";\r\n\r\nconst DialogsMessage = ({message}) => {\r\n    return(\r\n        <h3>{message} &nbsp;</h3>\r\n    )\r\n}\r\nexport default DialogsMessage","import React from \"react\";\r\nimport s from './Dialogs.module.css'\r\nimport DialogForm from \"./DialogsContent/DialogsForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport DialogsList from \"./DialogsContent/DialogsList\";\r\nimport DialogsMessage from \"./DialogsContent/DialogsMessages\";\r\nconst Dialogs = () => {\r\nconst dialogs = useSelector(state => state.dialogs.dialogs)\r\nconst users = useSelector(state => state.dialogs.users)\r\n\r\n    return(\r\n        <div className={s.dialogWrapper}>\r\n            <div className={s.dialogList}>\r\n                {users.map(user => {return <DialogsList key={user.userId} {...user}/>})}\r\n\r\n            </div>\r\n\r\n            <div className={s.dialogs}>\r\n                {dialogs.map(dialog => {return <DialogsMessage key={dialog.id} message={dialog.message}/>})}\r\n                <DialogForm/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Dialogs","import React from \"react\";\r\nimport s from './Users.module.css'\r\n\r\nconst User = ({name, status}) => {\r\n\r\n    return (\r\n       <div className={s.user}>\r\n           <h4>{name}</h4>\r\n           <p>{status}</p>\r\n       </div>\r\n    )\r\n}\r\nexport default User","import React from \"react\";\r\nimport s from './Users.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport User from \"./User\";\r\n\r\nconst Users = () => {\r\nconst users = useSelector(state => state.auth.users)\r\n    return (\r\n       <div className={s.users}>\r\n           {users.map(user => {return <User key={user.id} {...user}/>})}\r\n       </div>\r\n    )\r\n}\r\nexport default Users","import React from \"react\";\r\nimport s from './Music.module.css'\r\n\r\nconst Music = () => {\r\n\r\n    return (\r\n       <div className={s.music}>Music</div>\r\n    )\r\n}\r\nexport default Music","import React from \"react\";\r\nimport s from './Settings.module.css'\r\n\r\n\r\nconst Settings = () => {\r\n\r\n    return (\r\n       <h3 className={s.settings}>Settings</h3>\r\n    )\r\n}\r\nexport default Settings","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Footer from \"./components/Footer/Footer\";\nimport Profile from \"./components/Profile/Profile\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Dialogs from \"./components/Dialogs/Dialogs\";\nimport Users from \"./components/Users/Users\";\nimport Music from \"./components/Music/Music\";\nimport Settings from \"./components/Settings/Settings\";\n\nconst App = () => {\n    return (\n        <div className=\"container\">\n            <Header/>\n            <Navbar/>\n            <div className=\"content\">\n                <Switch>\n                    <Route path='/profile' component={Profile}/>\n                    <Route path='/dialogs' component={Dialogs}/>\n                    <Route path='/users' component={Users}/>\n                    <Route path='/music' component={Music}/>\n                    <Route path='/settings' component={Settings}/>\n\n                </Switch>\n            </div>\n\n            <Footer/>\n        </div>\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ADD_POST, FETCH_POST, REMOVE_POST} from \"./profileTypes\";\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, title: ' ghjk'},\r\n        {id: 2, title: ' juyt'},\r\n        {id: 3, title: ' dfgh'}\r\n    ],\r\n    fetchedPosts: []\r\n}\r\nexport const profileReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_POST :\r\n            return {...state, posts: state.posts.concat(action.payload)}\r\n        case REMOVE_POST:\r\n            return {...state, posts: state.posts.filter(post => post.id !== action.payload)}\r\n        case FETCH_POST:\r\n            return {...state, fetchedPosts: action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {SEND_MESSAGE} from \"./dialogTypes\";\r\n\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, message: ['Hello', 'How are you?']},\r\n        {id: 2, message: ['Yo sobaki', 'Ya naruto udzumaki']},\r\n        {id: 3, message: ['Hey', 'Whats up?', 'Miss you']\r\n        },\r\n    ],\r\n    users: [\r\n        {userId:1, name: 'Dmitriy'},\r\n        {userId:2, name: 'Kate'},\r\n        {userId:3, name: 'Ira'},\r\n        {userId:4, name: 'Boris'},\r\n    ]\r\n}\r\nexport const dialogsReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            return {...state, dialogs: state.dialogs.concat(action.payload)}\r\n        default:\r\n            return state\r\n    }\r\n}","import {LOGIN, LOGOUT} from \"./authTypes\";\r\n\r\nconst initialState = {\r\n    users: [\r\n        {id: 1, name: ' Dima', status: 'Hello world', email: 'dima@gmail.com', password: '424242'},\r\n        {id: 2, name: ' Kate', status: \"I'm a model\", email: 'kate@gmail.com', password: '424242'},\r\n        {id: 3, name: ' Artur', status: 'Give me some whiskey', email: 'artur@gmail.com', password: '424242'},\r\n        {id: 4, name: ' Olia', status: 'KPI for all life', email: 'olia@gmail.com', password: '424242'},\r\n        {id: 5, name: ' Mary', status: 'Mama mia', email: 'mary@gmail.com', password: '424242'},\r\n        {id: 6, name: ' Hope', status: 'I am dead', email: 'hope@gmail.com', password: '424242'},\r\n        {id: 7, name: ' Trust', status: 'Dont trust me!', email: 'trust@gmail.com', password: '424242'},\r\n    ],\r\n    auth: false\r\n}\r\nexport const authReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case LOGIN :\r\n            return {...state ,auth: true}\r\n        case LOGOUT :\r\n            return {...state, auth: false}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {profileReducer} from \"./ProfileStore/profileReducer\";\r\nimport {dialogsReducer} from \"./DialogStore/dialogsReducer\";\r\nimport {authReducer} from \"./AuthStore/authReducer\";\r\n\r\nexport const appReducer = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogsReducer,\r\n    auth: authReducer\r\n})","import {FETCH_POST, REQUEST_POST} from \"./ProfileStore/profileTypes\";\r\nimport {put, takeEvery,call} from \"redux-saga/effects\";\r\n\r\n\r\n\r\nexport function* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POST, sagaWorker)\r\n}\r\n\r\nfunction* sagaWorker() {\r\n    try {\r\n    const payload = yield call(fetchPosts)\r\n        yield put({type:FETCH_POST, payload})\r\n    } catch (e) {\r\n        console.log(e.message('Error'))\r\n    }\r\n}\r\nasync function fetchPosts() {\r\n\r\n    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=6')\r\n    return await response.json()\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport {appReducer} from './redux/appReducer'\nimport createSagaMiddleware from 'redux-saga'\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport {sagaWatcher} from \"./redux/SagaWatcher\";\nimport thunk from \"redux-thunk\";\n\n\nconst saga = createSagaMiddleware()\n\n\nconst store = createStore(appReducer, compose(\n    applyMiddleware(\nsaga, thunk\n    ),window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\nsaga.run(sagaWatcher)\nconst app = (\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n\n    </Provider>\n)\n\nReactDOM.render(\n    app,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}